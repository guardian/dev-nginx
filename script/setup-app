#!/usr/bin/env ruby

require 'yaml'
require 'fileutils'

if ARGV.size != 1 and ARGV.size != 2
    puts "usage: setup-app [--force] <config.yml>"
    exit(1)
end

HERE=File.dirname(__FILE__)
DEFAULT_DOMAIN_ROOT = "local.dev-gutools.co.uk"
NGINX_DIR = `#{HERE}/locate-nginx`.chomp

config_file = ARGV[0] != "--force" ? ARGV[0] : ARGV[1]

force = ARGV[0] == "--force" or ARGV[1] == "--force"

config = YAML.load_file(config_file)
name = config['name']
ssl = config.key?('ssl') ? config['ssl'] : true
port = ssl ? "443 ssl" : "80"
global_domain_root = config['domain-root'] || DEFAULT_DOMAIN_ROOT
dest_dir = File.join(NGINX_DIR, "servers")
FileUtils.mkdir_p(dest_dir)

dest = File.join(dest_dir, "#{name}.conf")

server_config = ""

config['mappings'].each do |mapping|

  domain_root = mapping['domain-root'] || global_domain_root
  path = mapping['path'] || ''
  websocket = mapping['websocket']

  domain = if mapping['prefix'] then "#{mapping['prefix']}.#{domain_root}" else "#{domain_root}" end

  client_max_body_size = mapping['client_max_body_size']

  server_config << <<-EOS
server {
  listen #{port};
  server_name #{domain};
EOS
  if client_max_body_size
    server_config << <<-EOS
  client_max_body_size #{client_max_body_size};

EOS
  end

  if websocket
    server_config << <<-EOS

    location #{websocket} {
      proxy_pass http://localhost:#{mapping['port']}#{websocket};
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $http_host;
      proxy_buffering off;
    }
EOS
  end

  server_config << <<-EOS

  location / {
    proxy_http_version 1.1;
    proxy_pass http://localhost:#{mapping['port']}#{path};
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_redirect default;
    proxy_buffering off;
  }

EOS

  if ssl
    server_config << <<-EOS
  ssl_certificate     #{domain}.crt;
  ssl_certificate_key #{domain}.key;

  ssl_session_timeout 5m;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers HIGH:!aNULL:!MD5;
  ssl_prefer_server_ciphers on;
EOS
  end

  server_config << <<-EOS
}

EOS

  if ssl
    server_config << <<-EOS
server {
  listen 80;
  server_name #{domain};

  # redirect all HTTP traffic to HTTPS
  return 301 https://$host$request_uri;
}

EOS
  end
  if ssl
    opts = force ? "--force" : ""
    `#{HERE}/setup-cert #{domain} #{opts}`
  end
end

begin
  old_server_config = File.read(dest)
rescue
  old_server_config = ""
end

if force or old_server_config != server_config
  file = File.open(dest, 'w') do |file|
    file.write server_config
    puts "Restarting nginx. This needs sudo permission, please enter password when prompted."
    `#{HERE}/restart-nginx`
    puts "Done."
  end
else
  puts "Found existing nginx configuration for this app, so doing nothing."
  puts "Rerun with --force to force installation of new configuration if required."
end
